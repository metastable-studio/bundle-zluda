name: Build

on:
  push:
    tags:
      - '*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build:
          - arch: 'x64'
            type: 'rocm5'
            zluda_url: 'https://github.com/lshqqytiger/ZLUDA/releases/download/rel.32493c9dcb22012a0ba95ee740980231236e909c/ZLUDA-windows-rocm5-amd64.zip'
          - arch: 'x64'
            type: 'rocm6'
            zluda_url: 'https://github.com/lshqqytiger/ZLUDA/releases/download/rel.32493c9dcb22012a0ba95ee740980231236e909c/ZLUDA-windows-rocm6-amd64.zip'
    runs-on: ubuntu-latest
    env:
      artifact_name: win32-${{ matrix.build.arch }}-${{ matrix.build.type }}.tar.zst
    steps:
      - name: Prepare ZLUDA
        run: |
          mkdir -p python/Lib/site-packages/torch/lib
          curl -L -o zluda.zip ${{ matrix.build.zluda_url }}
          unzip zluda.zip
          cp zluda/cublas.dll zluda/cublas64_11.dll
          cp zluda/cusparse.dll zluda/cusparse64_11.dll
          cp zluda/nvrtc.dll zluda/nvrtc64_112_0.dll
          cp zluda/cublas.dll python/Lib/site-packages/torch/lib/cublas64_11.dll
          cp zluda/cusparse.dll python/Lib/site-packages/torch/lib/cusparse64_11.dll
          cp zluda/nvrtc.dll python/Lib/site-packages/torch/lib/nvrtc64_112_0.dll
          cp -r zluda python/zluda

      - name: Build artifact
        run: |
          cd python
          tar -cf - * | zstd -9 -T0 > /tmp/${{ env.artifact_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: /tmp/${{ env.artifact_name }}
          compression-level: 0

  release:
    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true

      - name: Upload artifacts to S3 bucket
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          AWS_REQUEST_CHECKSUM_CALCULATION: when_required
        run: |
          aws s3 cp ./artifacts s3://${{ vars.S3_BUCKET }}/${{ vars.S3_PREFIX }}/${{ github.ref_name }}/ --recursive --endpoint-url ${{ secrets.S3_ENDPOINT }}

      - name: Upload version file to S3 bucket
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          AWS_REQUEST_CHECKSUM_CALCULATION: when_required
        run: |
          jq -n --arg version '${{ github.ref_name }}' '$ARGS.named' > /tmp/version.json
          aws s3 cp /tmp/version.json s3://${{ vars.S3_BUCKET }}/${{ vars.S3_PREFIX }}/version.json --endpoint-url ${{ secrets.S3_ENDPOINT }}
